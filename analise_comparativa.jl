"""
An√°lise Comparativa AnderSim: Original vs Modular
================================================
Este script gera gr√°ficos comparativos entre os resultados dos c√≥digos
original e modular do AnderSim, analisando as diferen√ßas encontradas.
"""

using CSV
using DataFrames
using Plots
using Statistics

function load_results()
    """Carrega os resultados dos dois c√≥digos"""
    println("üìä Carregando resultados...")
    
    # Carregar dados
    original = CSV.read("export.csv", DataFrame)
    modular = CSV.read("export_modular.csv", DataFrame)
    
    println("‚úÖ Dados carregados:")
    println("   Original: $(nrow(original)) pontos")
    println("   Modular:  $(nrow(modular)) pontos")
    
    return original, modular
end

function calculate_differences(original, modular)
    """Calcula diferen√ßas entre os resultados"""
    println("üîç Calculando diferen√ßas...")
    
    differences = DataFrame()
    
    for col in names(original)
        if col in names(modular)
            diff_abs = abs.(original[!, col] - modular[!, col])
            diff_rel = diff_abs ./ abs.(original[!, col]) * 100
            
            differences[!, "$(col)_abs"] = diff_abs
            differences[!, "$(col)_rel"] = diff_rel
            
            println("   $col: m√°x=$(maximum(diff_rel))%, m√©dia=$(mean(diff_rel))%")
        end
    end
    
    return differences
end

function plot_comparison_results(original, modular, differences)
    """Gera gr√°ficos comparativos"""
    println("üìà Gerando gr√°ficos...")
    
    # Configurar posi√ß√µes (assumindo espa√ßamento uniforme)
    N = nrow(original)
    positions = 1:N
    
    # 1. Gr√°fico de velocidades
    p1 = plot(positions, original.UL, label="UL Original", lw=2, color=:blue)
    plot!(p1, positions, modular.UL, label="UL Modular", lw=2, color=:lightblue, linestyle=:dash)
    plot!(p1, positions, original.UG, label="UG Original", lw=2, color=:red)
    plot!(p1, positions, modular.UG, label="UG Modular", lw=2, color=:pink, linestyle=:dash)
    xlabel!(p1, "Posi√ß√£o")
    ylabel!(p1, "Velocidade [m/s]")
    title!(p1, "Compara√ß√£o de Velocidades")
    
    # 2. Gr√°fico de densidades
    p2 = plot(positions, original.œÅL, label="œÅL Original", lw=2, color=:blue)
    plot!(p2, positions, modular.œÅL, label="œÅL Modular", lw=2, color=:lightblue, linestyle=:dash)
    plot!(p2, positions, original.œÅG, label="œÅG Original", lw=2, color=:red)
    plot!(p2, positions, modular.œÅG, label="œÅG Modular", lw=2, color=:pink, linestyle=:dash)
    xlabel!(p2, "Posi√ß√£o")
    ylabel!(p2, "Densidade [kg/m¬≥]")
    title!(p2, "Compara√ß√£o de Densidades")
    
    # 3. Gr√°fico de fra√ß√µes volum√©tricas
    p3 = plot(positions, original.AlfaL, label="Œ±L Original", lw=2, color=:green)
    plot!(p3, positions, modular.AlfaL, label="Œ±L Modular", lw=2, color=:lightgreen, linestyle=:dash)
    plot!(p3, positions, original.AlfaG, label="Œ±G Original", lw=2, color=:orange)
    plot!(p3, positions, modular.AlfaG, label="Œ±G Modular", lw=2, color=:yellow, linestyle=:dash)
    xlabel!(p3, "Posi√ß√£o")
    ylabel!(p3, "Fra√ß√£o Volum√©trica [-]")
    title!(p3, "Compara√ß√£o de Fra√ß√µes Volum√©tricas")
    
    # 4. Gr√°fico de temperatura e press√£o
    p4 = plot(positions, original.Temperatura, label="T Original", lw=2, color=:purple)
    plot!(p4, positions, modular.Temperatura, label="T Modular", lw=2, color=:magenta, linestyle=:dash)
    xlabel!(p4, "Posi√ß√£o")
    ylabel!(p4, "Temperatura [¬∞C]")
    title!(p4, "Compara√ß√£o de Temperatura")
    
    # 5. Gr√°fico de diferen√ßas relativas - Velocidades
    p5 = plot(positions, differences.UL_rel, label="UL", lw=2, color=:blue)
    plot!(p5, positions, differences.UG_rel, label="UG", lw=2, color=:red)
    xlabel!(p5, "Posi√ß√£o")
    ylabel!(p5, "Diferen√ßa Relativa [%]")
    title!(p5, "Diferen√ßas Relativas - Velocidades")
    
    # 6. Gr√°fico de diferen√ßas relativas - Densidades
    p6 = plot(positions, differences.œÅL_rel, label="œÅL", lw=2, color=:blue)
    plot!(p6, positions, differences.œÅG_rel, label="œÅG", lw=2, color=:red)
    xlabel!(p6, "Posi√ß√£o")
    ylabel!(p6, "Diferen√ßa Relativa [%]")
    title!(p6, "Diferen√ßas Relativas - Densidades")
    
    # Combinar gr√°ficos
    comparison_plot = plot(p1, p2, p3, p4, layout=(2,2), size=(1200,800))
    differences_plot = plot(p5, p6, layout=(1,2), size=(1000,400))
    
    # Salvar gr√°ficos
    savefig(comparison_plot, "comparacao_resultados.png")
    savefig(differences_plot, "diferencas_relativas.png")
    
    println("‚úÖ Gr√°ficos salvos:")
    println("   üìä comparacao_resultados.png")
    println("   üìà diferencas_relativas.png")
    
    return comparison_plot, differences_plot
end

function generate_statistics_table(original, modular, differences)
    """Gera tabela de estat√≠sticas"""
    println("üìã Gerando estat√≠sticas...")
    
    stats = DataFrame(
        Variavel = String[],
        Original_Min = Float64[],
        Original_Max = Float64[],
        Original_Media = Float64[],
        Modular_Min = Float64[],
        Modular_Max = Float64[],
        Modular_Media = Float64[],
        Diff_Max_Abs = Float64[],
        Diff_Max_Rel = Float64[],
        Diff_Media_Rel = Float64[]
    )
    
    variables = ["Pr", "UL", "UG", "AlfaL", "AlfaG", "Temperatura", "œÅL", "œÅG"]
    
    for var in variables
        if var in names(original) && var in names(modular)
            push!(stats, [
                var,
                minimum(original[!, var]),
                maximum(original[!, var]),
                mean(original[!, var]),
                minimum(modular[!, var]),
                maximum(modular[!, var]),
                mean(modular[!, var]),
                maximum(differences[!, "$(var)_abs"]),
                maximum(differences[!, "$(var)_rel"]),
                mean(differences[!, "$(var)_rel"])
            ])
        end
    end
    
    # Salvar tabela
    CSV.write("estatisticas_comparacao.csv", stats)
    println("‚úÖ Estat√≠sticas salvas em: estatisticas_comparacao.csv")
    
    return stats
end

function main()
    """Fun√ß√£o principal"""
    println("üéØ AN√ÅLISE COMPARATIVA ANDERSIM")
    println("=" ^ 50)
    
    # Carregar dados
    original, modular = load_results()
    
    # Calcular diferen√ßas
    differences = calculate_differences(original, modular)
    
    # Gerar gr√°ficos
    comp_plot, diff_plot = plot_comparison_results(original, modular, differences)
    
    # Gerar estat√≠sticas
    stats = generate_statistics_table(original, modular, differences)
    
    # Resumo final
    println("\nüìä RESUMO DA AN√ÅLISE:")
    println("=" ^ 30)
    
    max_diffs = []
    for var in ["UL", "UG", "œÅL", "œÅG", "Temperatura"]
        if "$(var)_rel" in names(differences)
            max_diff = maximum(differences[!, "$(var)_rel"])
            mean_diff = mean(differences[!, "$(var)_rel"])
            push!(max_diffs, max_diff)
            println("   $var: m√°x=$(round(max_diff, digits=2))%, m√©dia=$(round(mean_diff, digits=2))%")
        end
    end
    
    overall_max = maximum(max_diffs)
    println("\nüéØ Maior diferen√ßa encontrada: $(round(overall_max, digits=2))%")
    
    if overall_max < 5
        println("‚úÖ Diferen√ßas pequenas - c√≥digos equivalentes")
    elseif overall_max < 25
        println("‚ö†Ô∏è  Diferen√ßas moderadas - t√≠picas de c√≥digos modularizados")
    else
        println("‚ùå Diferen√ßas significativas - revisar implementa√ß√£o")
    end
    
    println("\n‚úÖ An√°lise completa!")
    println("üìÅ Arquivos gerados:")
    println("   üìä comparacao_resultados.png")
    println("   üìà diferencas_relativas.png") 
    println("   üìã estatisticas_comparacao.csv")
    
    return stats, comp_plot, diff_plot
end

# Executar an√°lise
if abspath(PROGRAM_FILE) == @__FILE__
    main()
end
